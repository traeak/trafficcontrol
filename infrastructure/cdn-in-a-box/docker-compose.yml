# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# To use this compose you should first build Traffic Ops and then copy the RPM to :
#
# trafficcontrol/infrastructure/cdn-in-a-box/traffic_ops/traffic_ops.rpm
#
#      cd trafficcontrol/infrastructure/cdn-in-a-box
#
# Adjust the settings in `variables.env` to suit your needs.
#
#      docker-compose up -d
#
# The Traffic Ops Go API will then be available on https://localhost:6443,
# the Perl API on https://localhost:60443, and the postgres database on localhost 5432.
#
# Note that this setup is intended for testing and not for production use.

---
version: '2.1'

networks:
  tcnet:
    driver: bridge
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: 172.13.239.0/24
        - subnet: "fc01:9400:1000:8::/64"

services:
  # db is the Traffic Ops database running in postgresql.  Only trafficops and trafficops-perl need to have access to it.
  # All other components access the database thru the Traffic Ops API
  db:
    build:
      context: traffic_ops
      dockerfile: Dockerfile-db
    hostname: db
    domainname: cdn.local
    networks:
      - tcnet
    volumes:
      - ./traffic_ops/data:/var/lib/postgresql/data
    env_file:
      - variables.env
    # TODO: change to expose: "5432" to limit to containers
    ports:
      - "5432:5432"

  # trafficops runs only the Go version of Traffic Ops in a container.  All Traffic Ops API endpoints that have
  # been rewritten in Go will be handled here.  All that have not are passed to the trafficops-perl service
  # defined below
  trafficops:
    build:
      context: .
      dockerfile: traffic_ops/Dockerfile-go
    depends_on:
      - db
      - trafficops-perl
    domainname: cdn.local
    env_file:
      - variables.env
    hostname: trafficops
    image: trafficops-go
    networks:
      - tcnet
    ports:
      - "6443:6443"

  # trafficops-perl runs the legacy Traffic Ops in Perl using the Mojolicious framework.  This remains
  # in place until all API endpoints have been rewritten in Go
  trafficops-perl:
    build:
      context: .
      dockerfile: traffic_ops/Dockerfile
      args:
        TRAFFIC_OPS_RPM: traffic_ops/traffic_ops.rpm
    depends_on:
      - db
    domainname: cdn.local
    env_file:
      - variables.env
    hostname: trafficops-perl
    image: trafficops-perl
    networks:
      - tcnet
    depends_on:
      - db
    # TODO: change to expose: "60443" to limit to containers
    ports:
      - "60443:60443"

  # trafficportal defines the web interface for Traffic Ops.  It uses only the API exposed by Traffic Ops
  # and passes any /api/... routes directly to Traffic Ops
  trafficportal:
    build:
      context: traffic_portal
      args:
        TRAFFIC_PORTAL_RPM: traffic_portal.rpm
    domainname: cdn.local
    env_file:
      - variables.env
    hostname: trafficportal
    image: trafficportal
    networks:
      - tcnet
    ports:
      - "443:443"

  # trafficmonitor is an HTTP service that monitors the caches in a CDN for a variety of metrics
  trafficmonitor:
    build:
      context: .
      dockerfile: traffic_monitor/Dockerfile
      args:
        TRAFFIC_MONITOR_RPM: traffic_monitor/traffic_monitor.rpm
    domainname: cdn.local
    env_file:
      - variables.env
    hostname: trafficmonitor
    image: trafficmonitor
    networks:
      - tcnet
    ports:
      - "80:80"

  # trafficvault runs a riak container to store private keys
  trafficvault:
    image: basho/riak-kv
    ports:
      - "8087:8087"
      - "8098:8098"
    environment:
      - CLUSTER_NAME=riakkv
    labels:
      - "com.basho.riak.cluster.name=trafficvault"
    volumes:
      - schemas:/etc/riak/schemas
    domainname: cdn.local
    env_file:
      - variables.env
    hostname: trafficvault
    networks:
      - tcnet
    ports:
      - "8010:80"

  # Apache Traffic Server (ATS) caches defined here
  # edge cache
  edge:
    build:
      context: .
      dockerfile: edge/Dockerfile
    domainname: cdn.local
    env_file:
      - variables.env
    hostname: edge
    networks:
      - tcnet
    ports:
      - "9000:80"

  # mid cache
  mid:
    build:
      context: .
      dockerfile: mid/Dockerfile
    domainname: cdn.local
    env_file:
      - variables.env
    hostname: mid
    networks:
      - tcnet
    ports:
      - "9100:80"

  # origin provides the content to be distributed through the CDN caches
  origin:
    build:
      context: origin
    domainname: cdn.local
    hostname: origin
    networks:
      - tcnet
    ports:
      - "9200:80"

  # enroller provides a way to register component instances with traffic_ops
  enroller:
    build:
      context: ../..
      dockerfile: infrastructure/cdn-in-a-box/enroller/Dockerfile
    env_file:
      - variables.env
    hostname: enroller
    networks:
      - tcnet
    ports:
      - "7443:443"
    volumes:  
      - /var/run/docker.sock:/var/run/docker.sock
      
volumes:
  schemas:
    external: false
